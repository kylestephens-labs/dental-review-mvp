import { describe, it, expect, beforeAll } from 'vitest';
import { readFileSync, existsSync } from 'fs';
import { join } from 'path';
import { execSync } from 'child_process';

describe('snippet generation', () => {
  const projectRoot = process.cwd();

  beforeAll(() => {
    // Generate snippets before running tests
    try {
      execSync('npm run generate-snippets', { cwd: projectRoot, stdio: 'pipe' });
    } catch (error) {
      console.warn('Failed to generate snippets:', error);
    }
  });
  
  describe('source file validation', () => {
    it('should have valid snippet source file', () => {
      const sourcePath = join(projectRoot, 'tools/prove/snippets/snippet-source.json');
      expect(existsSync(sourcePath)).toBe(true);
      
      const source = JSON.parse(readFileSync(sourcePath, 'utf-8'));
      
      // Check required top-level properties
      expect(source.metadata).toBeDefined();
      expect(source.snippets).toBeDefined();
      expect(source.mcpSnippets).toBeDefined();
      expect(source.taskTemplates).toBeDefined();
      expect(source.cursorRules).toBeDefined();
      
      // Check metadata
      expect(source.metadata.version).toBeDefined();
      expect(source.metadata.description).toBeDefined();
      expect(source.metadata.generatedBy).toBeDefined();
    });

    it('should have required snippets', () => {
      const sourcePath = join(projectRoot, 'tools/prove/snippets/snippet-source.json');
      const source = JSON.parse(readFileSync(sourcePath, 'utf-8'));
      
      const requiredSnippets = [
        'prove-functional',
        'prove-non-functional', 
        'prove-quick',
        'prove-full',
        'task-json-functional',
        'task-json-non-functional',
        'problem-analysis-template'
      ];
      
      requiredSnippets.forEach(snippetKey => {
        expect(source.snippets[snippetKey]).toBeDefined();
        expect(source.snippets[snippetKey].prefix).toBeDefined();
        expect(source.snippets[snippetKey].body).toBeInstanceOf(Array);
        expect(source.snippets[snippetKey].description).toBeDefined();
      });
    });

    it('should have required MCP snippets', () => {
      const sourcePath = join(projectRoot, 'tools/prove/snippets/snippet-source.json');
      const source = JSON.parse(readFileSync(sourcePath, 'utf-8'));
      
      const requiredMcpSnippets = [
        'prove-functional',
        'prove-non-functional',
        'prove-quick'
      ];
      
      requiredMcpSnippets.forEach(snippetKey => {
        expect(source.mcpSnippets[snippetKey]).toBeDefined();
        expect(source.mcpSnippets[snippetKey].name).toBeDefined();
        expect(source.mcpSnippets[snippetKey].description).toBeDefined();
        expect(source.mcpSnippets[snippetKey].parameters).toBeDefined();
      });
    });

    it('should have required task templates', () => {
      const sourcePath = join(projectRoot, 'tools/prove/snippets/snippet-source.json');
      const source = JSON.parse(readFileSync(sourcePath, 'utf-8'));
      
      const requiredTemplates = ['functional', 'non-functional'];
      
      requiredTemplates.forEach(templateKey => {
        expect(source.taskTemplates[templateKey]).toBeDefined();
        expect(source.taskTemplates[templateKey].name).toBeDefined();
        expect(source.taskTemplates[templateKey].description).toBeDefined();
        expect(source.taskTemplates[templateKey].steps).toBeInstanceOf(Array);
        expect(source.taskTemplates[templateKey].requiredFiles).toBeInstanceOf(Array);
        expect(source.taskTemplates[templateKey].proveCommand).toBeDefined();
      });
    });

    it('should have required cursor rules', () => {
      const sourcePath = join(projectRoot, 'tools/prove/snippets/snippet-source.json');
      const source = JSON.parse(readFileSync(sourcePath, 'utf-8'));
      
      expect(source.cursorRules.title).toBeDefined();
      expect(source.cursorRules.description).toBeDefined();
      expect(source.cursorRules.rules).toBeInstanceOf(Array);
      expect(source.cursorRules.requiredResponseFormat).toBeInstanceOf(Array);
    });
  });

  describe('generated files validation', () => {
    it('should generate VS Code snippets file', () => {
      const vscodeSnippetsPath = join(projectRoot, '.vscode/prove-snippets.code-snippets');
      expect(existsSync(vscodeSnippetsPath)).toBe(true);
      
      const content = readFileSync(vscodeSnippetsPath, 'utf-8');
      expect(content).toContain('Generated by:');
      expect(content).toContain('prove-functional');
      expect(content).toContain('prove-non-functional');
    });

    it('should generate MCP snippets file', () => {
      const mcpSnippetsPath = join(projectRoot, '.vscode/mcp-prove-snippets.json');
      expect(existsSync(mcpSnippetsPath)).toBe(true);
      
      const content = readFileSync(mcpSnippetsPath, 'utf-8');
      expect(content).toContain('Generated by:');
      expect(content).toContain('prove-functional');
      expect(content).toContain('prove-non-functional');
    });

    it('should generate task templates file', () => {
      const taskTemplatesPath = join(projectRoot, '.vscode/task-templates.json');
      expect(existsSync(taskTemplatesPath)).toBe(true);
      
      const content = readFileSync(taskTemplatesPath, 'utf-8');
      expect(content).toContain('Generated by:');
      expect(content).toContain('functional-task');
      expect(content).toContain('non-functional-task');
    });

    it('should generate agent compliance guide', () => {
      const complianceGuidePath = join(projectRoot, '.vscode/agent-compliance-guide.md');
      expect(existsSync(complianceGuidePath)).toBe(true);
      
      const content = readFileSync(complianceGuidePath, 'utf-8');
      expect(content).toContain('Generated by:');
      expect(content).toContain('Agent Compliance Guide');
      expect(content).toContain('Prove Check Results');
    });

    it('should generate Cursor rules file', () => {
      const cursorRulesPath = join(projectRoot, '.cursorrules');
      expect(existsSync(cursorRulesPath)).toBe(true);
      
      const content = readFileSync(cursorRulesPath, 'utf-8');
      expect(content).toContain('Generated by:');
      expect(content).toContain('Prove Contract Compliance Rules');
      expect(content).toContain('Core Principles');
    });
  });

  describe('snippet content validation', () => {
    it('should have required placeholders in prove snippets', () => {
      const sourcePath = join(projectRoot, 'tools/prove/snippets/snippet-source.json');
      const source = JSON.parse(readFileSync(sourcePath, 'utf-8'));
      
      const proveSnippets = ['prove-functional', 'prove-non-functional'];
      
      proveSnippets.forEach(snippetKey => {
        const snippet = source.snippets[snippetKey];
        const body = snippet.body.join('\n');
        
        expect(body).toContain('## Prove Check Results');
        expect(body).toContain('**Command:** `npm run prove`');
        expect(body).toContain('**Status:** ✅ PASSED / ❌ FAILED');
        expect(body).toContain('**Logs:**');
        expect(body).toContain('**Report:**');
        expect(body).toContain('prove-report.json');
      });
      
      // Check prove-full separately as it has a different header
      const proveFullSnippet = source.snippets['prove-full'];
      const proveFullBody = proveFullSnippet.body.join('\n');
      
      expect(proveFullBody).toContain('## Prove Full Check Results');
      expect(proveFullBody).toContain('**Command:** `npm run prove`');
      expect(proveFullBody).toContain('**Status:** ✅ PASSED / ❌ FAILED');
      expect(proveFullBody).toContain('**Logs:**');
      expect(proveFullBody).toContain('**Report:**');
      expect(proveFullBody).toContain('prove-report.json');
    });

    it('should have required placeholders in quick snippets', () => {
      const sourcePath = join(projectRoot, 'tools/prove/snippets/snippet-source.json');
      const source = JSON.parse(readFileSync(sourcePath, 'utf-8'));
      
      const snippet = source.snippets['prove-quick'];
      const body = snippet.body.join('\n');
      
      expect(body).toContain('## Prove Quick Check Results');
      expect(body).toContain('**Command:** `npm run prove:quick`');
      expect(body).toContain('**Status:** ✅ PASSED / ❌ FAILED');
      expect(body).toContain('**Logs:**');
    });

    it('should have required sections in problem analysis template', () => {
      const sourcePath = join(projectRoot, 'tools/prove/snippets/snippet-source.json');
      const source = JSON.parse(readFileSync(sourcePath, 'utf-8'));
      
      const snippet = source.snippets['problem-analysis-template'];
      const body = snippet.body.join('\n');
      
      expect(body).toContain('## Analyze');
      expect(body).toContain('## Identify Root Cause');
      expect(body).toContain('## Fix Directly');
      expect(body).toContain('## Validate');
    });
  });
});
