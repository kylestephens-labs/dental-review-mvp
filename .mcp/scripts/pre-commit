#!/bin/bash
# Pre-commit hook - Enhanced Practice Enforcement with Workflow Validation

echo "üö® ENHANCED PRACTICE ENFORCEMENT - Pre-commit check"

# Run conflict-first gate
echo "üîç Running conflict-first gate..."
if ! npm run workflow:conflict-check >/dev/null 2>&1; then
  echo "‚ùå Conflict-first gate failed - resolve conflicts before committing"
  exit 1
fi
echo "‚úÖ Conflict-first gate passed"

# Run practice checker
if ! ./.mcp/scripts/check-practices.sh; then
  echo "‚ùå Practice check failed - commit blocked"
  exit 1
fi

# Check commit message format
COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat $COMMIT_MSG_FILE)

# Check for practice indicators
if ! echo "$COMMIT_MSG" | grep -E "\[TDD:|\[TRUNK\]|\[CONFLICT-CLEAR\]|\[FEATURE-FLAG\]|\[VELOCITY\]" >/dev/null; then
  echo "‚ùå Commit message missing practice indicators"
  echo "Required format: feat: description [TDD:RED] [TRUNK] [CONFLICT-CLEAR]"
  echo "Current message: $COMMIT_MSG"
  echo ""
  echo "Add practice indicators:"
  echo "  [TDD:RED] - Red phase completed"
  echo "  [TDD:GREEN] - Green phase completed"
  echo "  [TDD:REFACTOR] - Refactor phase completed"
  echo "  [TRUNK] - Committed directly to main"
  echo "  [CONFLICT-CLEAR] - No conflicts detected"
  echo "  [FEATURE-FLAG] - Using feature flag for rollout"
  echo "  [VELOCITY] - Meeting velocity targets"
  exit 1
fi

# Run fast CI validation
echo "‚ö° Running fast CI validation..."
if ! npm run workflow:fast-ci >/dev/null 2>&1; then
  echo "‚ùå Fast CI validation failed - fix issues before committing"
  exit 1
fi
echo "‚úÖ Fast CI validation passed"

# Update MCP task status based on commit message and test results
echo "üîÑ Updating MCP task status..."

# Extract task ID from commit message if present
TASK_ID=$(echo "$COMMIT_MSG" | grep -oE "\[task-[a-z0-9-]+\]" | sed 's/\[//g' | sed 's/\]//g')

if [ -n "$TASK_ID" ]; then
  echo "üìã Found task ID: $TASK_ID"
  
  # Run tests to determine if task should be marked complete or failed
  echo "üß™ Running tests to determine task status..."
  
  if npm run test 2>/dev/null; then
    echo "‚úÖ Tests passed - marking task complete"
    npx tsx .mcp/scripts/task-handoff.ts complete "$TASK_ID" 2>/dev/null || echo "‚ö†Ô∏è  Could not update task status"
  else
    echo "‚ùå Tests failed - marking task failed"
    ERROR_MSG="Tests failed during commit"
    npx tsx .mcp/scripts/task-handoff.ts fail "$TASK_ID" "$ERROR_MSG" 2>/dev/null || echo "‚ö†Ô∏è  Could not update task status"
  fi
  
  # Update git context for the task
  BRANCH=$(git branch --show-current)
  COMMIT_HASH=$(git rev-parse HEAD)
  npx tsx .mcp/scripts/task-handoff.ts git "$TASK_ID" "$BRANCH" "$COMMIT_HASH" 2>/dev/null || echo "‚ö†Ô∏è  Could not update git context"
else
  echo "‚ÑπÔ∏è  No task ID found in commit message"
fi

echo "‚úÖ Enhanced pre-commit check passed - all practices followed"