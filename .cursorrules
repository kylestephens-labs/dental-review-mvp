# Prove Contract Compliance Rules

<!-- 
  Generated by: tools/prove/scripts/generate-snippets.ts
  Version: 1.0.0
  Last Updated: 2025-01-18T00:00:00Z
  
  To regenerate: npm run generate-snippets
-->

Cursor-specific rules for prove contract compliance

## Core Principles
- All tasks must follow the prove contract
- Functional tasks require TDD and diff coverage
- Non-functional tasks require PROBLEM_ANALYSIS.md
- Always run npm run prove and include logs
- Never proceed without passing prove checks

## Required Response Format
```
## Prove Check Results
**Command:** `npm run prove`
**Status:** ✅ PASSED / ❌ FAILED

**Logs:**
```
[Full prove output here]
```

**Report:**
```json
[prove-report.json content here]
```
```

## Task Mode Resolution
1. Determine if task is functional or non-functional
2. Update tasks/TASK.json with correct mode
3. For non-functional: ensure PROBLEM_ANALYSIS.md exists
4. Run prove checks before completion

## Quality Gates
- Trunk: Development on main branch only
- Delivery Mode: Mode resolution and validation
- Commit Message: Conventional commit format
- Kill-switch: Required for feature commits
- Environment: Required environment variables
- Lint: ESLint with zero warnings
- Typecheck: TypeScript compilation
- Tests: Vitest test suite
- TDD: Changed files must have tests (functional)
- Diff Coverage: Coverage on changed lines (functional)
- Problem Analysis: Required sections (non-functional)

## Failure Handling
- Fix all prove failures before proceeding
- Include full error logs in response
- Do not mark task complete without prove success
- Use prove-report.json to identify specific issues

## Environment Variables
- PROVE_MODE: Override task mode
- PROVE_ENABLE_*: Toggle specific checks
- PROVE_JSON: Enable JSON output mode

## Examples

### Functional Task
```typescript
// 1. Set mode
const taskMode = 'functional';
// Update TASK.json

// 2. Implement with TDD
// Write tests first, then implementation

// 3. Run prove
exec('npm run prove', (error, stdout, stderr) => {
  // Handle results and include in response
});
```

### Non-Functional Task
```typescript
// 1. Set mode
const taskMode = 'non-functional';
// Update TASK.json

// 2. Create PROBLEM_ANALYSIS.md
// Ensure all required sections exist

// 3. Run prove
exec('npm run prove', (error, stdout, stderr) => {
  // Handle results and include in response
});
```

## Compliance Checklist
- [ ] Task mode determined and set
- [ ] TASK.json updated correctly
- [ ] For non-functional: PROBLEM_ANALYSIS.md created
- [ ] npm run prove executed
- [ ] All prove checks pass
- [ ] Prove logs included in response
- [ ] prove-report.json content pasted
- [ ] Task marked complete only after prove success
