name: Prove Quality Gates

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prove-quality-gates:
    name: Prove Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set Feature Flag Environment Variables
        run: |
          # Set feature flags as environment variables for CI testing
          echo "VITE_FEATURE_ENHANCED_INTAKE_FORM=false" >> $GITHUB_ENV
          echo "VITE_FEATURE_AUTO_SAVE=false" >> $GITHUB_ENV
          echo "VITE_FEATURE_ADVANCED_ANALYTICS=false" >> $GITHUB_ENV
          echo "VITE_FEATURE_DYNAMIC_CONTENT=false" >> $GITHUB_ENV
          echo "VITE_FEATURE_GOOGLE_CALENDAR_INTEGRATION=false" >> $GITHUB_ENV
          echo "VITE_FEATURE_OUTLOOK_INTEGRATION=false" >> $GITHUB_ENV
          echo "VITE_FEATURE_CSV_UPLOAD_FEATURE=false" >> $GITHUB_ENV
          echo "VITE_FEATURE_FRONT_DESK_MODE=false" >> $GITHUB_ENV
          echo "VITE_FEATURE_REVIEW_INGESTION=false" >> $GITHUB_ENV
          echo "VITE_FEATURE_WEEKLY_DIGEST=false" >> $GITHUB_ENV

      - name: Pre-conflict dry merge (for PRs)
        if: github.event_name == 'pull_request'
        run: |
          echo "Performing pre-conflict dry merge..."
          git fetch origin ${{ github.base_ref }}
          git merge --no-commit --no-ff origin/${{ github.base_ref }}
          git merge --abort || true
          echo "Pre-conflict check completed"

      - name: Run Prove Quality Gates (Quick Mode)
        run: npm run prove:quick
        # Environment variables are automatically loaded from GitHub Secrets
        # No explicit secret references to avoid security exposure

      # TEMPORARILY DISABLED: Full mode while building prove quality gates
      # - name: Run Prove Quality Gates (Full Mode) - Main Branch Only
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: npm run prove
      #   # Environment variables are automatically loaded from GitHub Secrets
      #   # No explicit secret references to avoid security exposure

      - name: Upload Prove Report Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: prove-report-node-${{ matrix.node-version }}
          path: |
            prove-report.json
            prove-report.txt
          retention-days: 30

      - name: Comment PR with Prove Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              // Try to read prove report
              const reportPath = 'prove-report.json';
              if (fs.existsSync(reportPath)) {
                const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
                
                const comment = `## üîç Prove Quality Gates Results
                
                **Status**: ${report.success ? '‚úÖ PASSED' : '‚ùå FAILED'}
                **Mode**: ${report.mode || 'unknown'}
                **Total Checks**: ${report.checks?.length || 0}
                **Passed**: ${report.checks?.filter(c => c.ok).length || 0}
                **Failed**: ${report.checks?.filter(c => !c.ok).length || 0}
                **Duration**: ${report.totalMs ? `${report.totalMs}ms` : 'unknown'}
                
                ### Check Details:
                ${report.checks?.map(check => 
                  `- **${check.id}**: ${check.ok ? '‚úÖ' : '‚ùå'} ${check.reason || ''} (${check.ms}ms)`
                ).join('\n') || 'No check details available'}
                
                <details>
                <summary>üìä Full Report</summary>
                
                \`\`\`json
                ${JSON.stringify(report, null, 2)}
                \`\`\`
                </details>`;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              } else {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: '## üîç Prove Quality Gates Results\n\n‚ùå **No report generated** - Check workflow logs for details.'
                });
              }
            } catch (error) {
              console.error('Error creating PR comment:', error);
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## üîç Prove Quality Gates Results\n\n‚ö†Ô∏è **Error generating report** - Check workflow logs for details.'
              });
            }

  # TEMPORARILY DISABLED: Vercel deployment while building prove quality gates
  # deploy:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: prove-quality-gates
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     
  #   - name: Set Production Feature Flags
  #     run: |
  #       # Set production feature flags (all disabled for initial deployment)
  #       echo "VITE_FEATURE_ENHANCED_INTAKE_FORM=false" >> $GITHUB_ENV
  #       echo "VITE_FEATURE_AUTO_SAVE=false" >> $GITHUB_ENV
  #       echo "VITE_FEATURE_ADVANCED_ANALYTICS=false" >> $GITHUB_ENV
  #       echo "VITE_FEATURE_DYNAMIC_CONTENT=false" >> $GITHUB_ENV
  #       echo "VITE_FEATURE_GOOGLE_CALENDAR_INTEGRATION=false" >> $GITHUB_ENV
  #       echo "VITE_FEATURE_OUTLOOK_INTEGRATION=false" >> $GITHUB_ENV
  #       echo "VITE_FEATURE_CSV_UPLOAD_FEATURE=false" >> $GITHUB_ENV
  #       echo "VITE_FEATURE_FRONT_DESK_MODE=false" >> $GITHUB_ENV
  #       echo "VITE_FEATURE_REVIEW_INGESTION=false" >> $GITHUB_ENV
  #       echo "VITE_FEATURE_WEEKLY_DIGEST=false" >> $GITHUB_ENV
  #       
  #   - name: Deploy to Vercel
  #     uses: amondnet/vercel-action@v25
  #     with:
  #       vercel-token: ${{ secrets.VERCEL_TOKEN }}
  #       vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
  #       vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
  #       vercel-args: '--prod'
  #       
  #   - name: Deployment Success
  #     run: |
  #       echo "üöÄ Deployment to production successful!"
  #       echo "üåê Application is live and ready for users"
  #       echo "üìä Feature flags status:"
  #       echo "  - ENHANCED_INTAKE_FORM: $VITE_FEATURE_ENHANCED_INTAKE_FORM"
  #       echo "  - AUTO_SAVE: $VITE_FEATURE_AUTO_SAVE"
  #       echo "  - ADVANCED_ANALYTICS: $VITE_FEATURE_ADVANCED_ANALYTICS"
  #       echo "  - DYNAMIC_CONTENT: $VITE_FEATURE_DYNAMIC_CONTENT"
  #       echo "  - GOOGLE_CALENDAR_INTEGRATION: $VITE_FEATURE_GOOGLE_CALENDAR_INTEGRATION"
  #       echo "  - OUTLOOK_INTEGRATION: $VITE_FEATURE_OUTLOOK_INTEGRATION"
  #       echo "  - CSV_UPLOAD_FEATURE: $VITE_FEATURE_CSV_UPLOAD_FEATURE"
  #       echo "  - FRONT_DESK_MODE: $VITE_FEATURE_FRONT_DESK_MODE"
  #       echo "  - REVIEW_INGESTION: $VITE_FEATURE_REVIEW_INGESTION"
  #       echo "  - WEEKLY_DIGEST: $VITE_FEATURE_WEEKLY_DIGEST"

  # Auto-close urgent issues and handle rollbacks
  issue-management:
    name: Issue Management
    runs-on: ubuntu-latest
    needs: prove-quality-gates
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Auto-Close Urgent Issues on Success
      if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/github-script@v7
      with:
        script: |
          console.log('üîç Checking for urgent issues to close...');
          
          // Find all open issues with urgent/rollback labels
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'urgent,rollback,main-branch,prove-failure'
          });
          
          if (issues.data.length === 0) {
            console.log('‚úÖ No urgent issues found to close');
            return;
          }
          
          console.log(`üìã Found ${issues.data.length} urgent issues to close`);
          
          // Close each issue with a resolution comment
          for (const issue of issues.data) {
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `## ‚úÖ **AUTOMATICALLY RESOLVED**
                
                **Main branch has been restored and prove quality gates are now passing.**
                
                ### üìä Resolution Details
                - **Commit**: \`${{ github.sha }}\`
                - **Author**: ${{ github.actor }}
                - **Message**: ${{ github.event.head_commit.message }}
                - **Workflow**: ${{ github.workflow }}
                - **Resolved At**: ${new Date().toISOString()}
                
                ### ‚úÖ Status Verification
                - **Trunk-based development**: ‚úÖ PASSED
                - **Commit message convention**: ‚úÖ PASSED
                - **Pre-conflict checks**: ‚úÖ PASSED
                - **Environment validation**: ‚úÖ PASSED (in CI)
                - **Type checking**: ‚úÖ PASSED
                - **Linting**: ‚úÖ PASSED
                - **Unit tests**: ‚úÖ PASSED
                
                ### üéØ Result
                **Main branch is stable and ready for continued development.**
                
                ---
                *This issue was automatically closed by the Prove Quality Gates workflow after successful validation.*`
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
              
              console.log(`‚úÖ Closed issue #${issue.number}: ${issue.title}`);
            } catch (error) {
              console.error(`‚ùå Failed to close issue #${issue.number}:`, error.message);
            }
          }
          
          console.log('üéâ All urgent issues have been processed');
        
    - name: Auto-Rollback on Failure
      if: failure() && github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "üö® PROVE QUALITY GATES FAILED ON MAIN BRANCH"
        echo "üîÑ Initiating auto-rollback procedure..."
        echo ""
        echo "üìã ROLLBACK INSTRUCTIONS:"
        echo "================================"
        echo ""
        echo "üîß IMMEDIATE ACTION REQUIRED:"
        echo "1. Revert the last commit:"
        echo "   git revert HEAD --no-edit"
        echo "   git push origin main"
        echo ""
        echo "2. OR reset to previous commit:"
        echo "   git reset --hard HEAD~1"
        echo "   git push --force-with-lease origin main"
        echo ""
        echo "3. OR rollback deployment (if applicable):"
        echo "   Check your deployment platform for rollback options"
        echo ""
        echo "üìä FAILURE DETAILS:"
        echo "- Commit: ${{ github.sha }}"
        echo "- Author: ${{ github.actor }}"
        echo "- Message: ${{ github.event.head_commit.message }}"
        echo "- Workflow: ${{ github.workflow }}"
        echo "- Run ID: ${{ github.run_id }}"
        echo ""
        echo "üîç INVESTIGATION STEPS:"
        echo "1. Check the workflow logs above for specific failure reasons"
        echo "2. Run 'npm run prove:quick' locally to reproduce the issue"
        echo "3. Fix the issues and create a new commit"
        echo "4. Ensure all quality gates pass before pushing to main"
        echo ""
        echo "‚ö†Ô∏è  MAIN BRANCH IS CURRENTLY IN A BROKEN STATE"
        echo "   Please take immediate action to restore functionality"
        echo ""
        
    - name: Create Rollback Issue
      if: failure() && github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/github-script@v7
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® URGENT: Main branch broken - Auto-rollback required`,
            body: `## üö® Main Branch Broken - Immediate Action Required
            
            **Prove Quality Gates failed on main branch push.**
            
            ### üìä Failure Details
            - **Commit**: \`${{ github.sha }}\`
            - **Author**: ${{ github.actor }}
            - **Message**: ${{ github.event.head_commit.message }}
            - **Workflow**: ${{ github.workflow }}
            - **Run ID**: ${{ github.run_id }}
            - **Failed At**: ${new Date().toISOString()}
            
            ### üîß Immediate Rollback Actions
            
            **Option 1: Revert Commit (Recommended)**
            \`\`\`bash
            git revert HEAD --no-edit
            git push origin main
            \`\`\`
            
            **Option 2: Reset to Previous Commit**
            \`\`\`bash
            git reset --hard HEAD~1
            git push --force-with-lease origin main
            \`\`\`
            
            **Option 3: Deployment Rollback**
            - Check your deployment platform for rollback options
            - Vercel: Go to deployments and rollback to previous version
            
            ### üîç Investigation Steps
            1. Check workflow logs for specific failure reasons
            2. Run \`npm run prove:quick\` locally to reproduce
            3. Fix issues and create new commit
            4. Ensure all quality gates pass before pushing to main
            
            ### ‚ö†Ô∏è Status
            - [ ] Rollback completed
            - [ ] Issue investigated
            - [ ] Fix implemented
            - [ ] Quality gates passing
            - [ ] Main branch restored
            
            ---
            *This issue was automatically created by the Prove Quality Gates workflow.*`,
            labels: ['urgent', 'rollback', 'main-branch', 'prove-failure']
          });
          
          console.log(`Created rollback issue: ${issue.data.html_url}`);
          
    - name: Notify Team of Failure
      if: failure() && github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "üì¢ Notifying team of main branch failure..."
        echo "üîó Check the GitHub Actions tab for detailed logs"
        echo "üìã A rollback issue has been created automatically"
        echo "‚ö†Ô∏è  Main branch requires immediate attention"

  prove-quality-gates-fast:
    name: Prove Quality Gates (Fast)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set Feature Flag Environment Variables
        run: |
          # Set feature flags as environment variables for CI testing
          echo "VITE_FEATURE_ENHANCED_INTAKE_FORM=false" >> $GITHUB_ENV
          echo "VITE_FEATURE_AUTO_SAVE=false" >> $GITHUB_ENV
          echo "VITE_FEATURE_ADVANCED_ANALYTICS=false" >> $GITHUB_ENV
          echo "VITE_FEATURE_DYNAMIC_CONTENT=false" >> $GITHUB_ENV
          echo "VITE_FEATURE_GOOGLE_CALENDAR_INTEGRATION=false" >> $GITHUB_ENV
          echo "VITE_FEATURE_OUTLOOK_INTEGRATION=false" >> $GITHUB_ENV
          echo "VITE_FEATURE_CSV_UPLOAD_FEATURE=false" >> $GITHUB_ENV
          echo "VITE_FEATURE_FRONT_DESK_MODE=false" >> $GITHUB_ENV
          echo "VITE_FEATURE_REVIEW_INGESTION=false" >> $GITHUB_ENV
          echo "VITE_FEATURE_WEEKLY_DIGEST=false" >> $GITHUB_ENV

      - name: Run Prove Quality Gates (Quick Mode)
        run: npm run prove:quick
        # Environment variables are automatically loaded from GitHub Secrets
        # No explicit secret references to avoid security exposure

      - name: Upload Prove Report Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: prove-report-fast
          path: |
            prove-report.json
            prove-report.txt
          retention-days: 30