# echo "🔍 Running context-aware secret detection before commit..."

# # Context-aware secret detection - only check relevant files
# SECRET_DETECTED=false

# # Get staged files
# STAGED_FILES=$(git diff --cached --name-only)

# # Skip secret detection for common false positive files
# SKIP_PATTERNS="\.gitignore$|package-lock\.json$|yarn\.lock$|coverage/|\.prove/|test-results/|playwright-report/|\.env\.example$"

# # Filter out files that commonly contain false positives
# RELEVANT_FILES=$(echo "$STAGED_FILES" | grep -v -E "$SKIP_PATTERNS" || true)

# if [ -n "$RELEVANT_FILES" ]; then
#   # Check for actual secrets in relevant files only
#   for file in $RELEVANT_FILES; do
#     if [ -f "$file" ]; then
#       # Look for secrets in context (assignment patterns, not just any string)
#       if grep -q -E "(password|secret|key|token|api_key|private_key)\s*[:=]\s*['\"][^'\"]{8,}" "$file" 2>/dev/null; then
#         echo "❌ Potential secret detected in: $file"
#         echo "💡 Check for hardcoded credentials and use environment variables instead"
#         SECRET_DETECTED=true
#       fi
      
#       # Check for common API key patterns
#       if grep -q -E "(sk_live_|sk_test_|pk_live_|pk_test_|AIza[0-9A-Za-z_-]{35}|ghp_[0-9A-Za-z_-]{36})" "$file" 2>/dev/null; then
#         echo "❌ API key pattern detected in: $file"
#         echo "💡 Use environment variables for API keys"
#         SECRET_DETECTED=true
#       fi
#     fi
#   done
# fi

# if [ "$SECRET_DETECTED" = true ]; then
#   echo "❌ Secret detection failed - commit blocked"
#   echo "💡 Use environment variables or .env files for sensitive data"
#   exit 1
# fi

# echo "✅ No secrets detected in relevant files"

echo "🔍 Running prove:quick before commit..."
npm run prove:quick

if [ $? -ne 0 ]; then
  echo "❌ prove:quick failed - commit blocked"
  echo "💡 Fix the issues above and try again"
  exit 1
fi

echo "✅ prove:quick passed - commit allowed"
